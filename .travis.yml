language: go
go:
  - "1.12.x"

sudo: required

services:
  - docker

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.24.1
  jobs:
    # TODO(js) Build per driver, not per db.
    # Builds with Go Modules enabled.
    - GO111MODULE=on DB=mssql
    - GO111MODULE=on DB=mysql
    - GO111MODULE=on DB=oracle
    - GO111MODULE=on DB=postgres
    - GO111MODULE=on DB=sqlite
    # Builds with Go Modules disabled.
    - GO111MODULE=off DB=mssql
    - GO111MODULE=off DB=mysql
    - GO111MODULE=off DB=oracle
    - GO111MODULE=off DB=postgres
    - GO111MODULE=off DB=sqlite

before_install:
  - sudo apt-get update
  # Update docker-compose.
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  # Install deps.
  # TODO(js) This driver does not currently build (github.com/jbarham/gopgsqldriver)
  # # Setup for github.com/jbarham/gopgsqldriver
  # - sudo apt-get install libpq-dev
  # Setup for github.com/minus5/gofreetds
  - sudo apt-get -y install freetds-dev
  # Go get our Go deps.
  - go get -v -t ./...

before_script:
  # - bash db-up.sh $DB 
  # # TODO(js) This sleep will probably prove to be flakey - it's an attempt to workaround slow VM startups.
  - bash db-up.sh $DB && sleep 1m

script:
  - go test && go test -p 1 ./drivers/$DB/...
  # - go test && ginkgo -r --randomizeAllSpecs --randomizeSuites ./drivers/$DB
  # - go test && go test -p 1 ./drivers/$DB/...
  # - go test && go test -p 1 -race -coverprofile=coverage.txt -covermode=atomic ./drivers/$DB/...
  # - go test -race -coverprofile=coverage.txt -covermode=atomic

after_script:
  - docker-compose down -v

# TODO(js) What is the best thing to do about coverage now we have a bazallion test?
# after_success:
#   - bash <(curl -s https://codecov.io/bash)

